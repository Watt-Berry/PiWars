// Generated by vtkWrapPythonInit in VTK/Wrapping
#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>
// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

extern "C" { void PyVTKAddFile_vtkAbstractInterpolatedVelocityField(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkAMRInterpolatedVelocityField(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkCachingInterpolatedVelocityField(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkCellLocatorInterpolatedVelocityField(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkCompositeInterpolatedVelocityField(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkEvenlySpacedStreamlines2D(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkInterpolatedVelocityField(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkLagrangianBasicIntegrationModel(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkLagrangianMatidaIntegrationModel(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkLagrangianParticle(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkLagrangianParticleTracker(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkLinearTransformCellLocator(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkModifiedBSPTree(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkParallelVectors(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkParticlePathFilter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkParticleTracer(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkParticleTracerBase(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkStreaklineFilter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkStreamSurface(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkStreamTracer(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTemporalInterpolatedVelocityField(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkVectorFieldTopology(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkVortexCore(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFiltersFlowPathsModule(PyObject *dict); }

static PyMethodDef PyvtkFiltersFlowPaths_Methods[] = {
{nullptr, nullptr, 0, nullptr}};

static PyModuleDef PyvtkFiltersFlowPaths_Module = {
  PyModuleDef_HEAD_INIT,
  "vtkFiltersFlowPaths", // m_name
  nullptr, // m_doc
  0, // m_size
  PyvtkFiltersFlowPaths_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};
extern  "C" {VTK_ABI_EXPORT PyObject *real_initvtkFiltersFlowPaths(const char * /*unused*/); }

PyObject *real_initvtkFiltersFlowPaths(const char * /*unused*/)
{
  PyObject *m = PyModule_Create(&PyvtkFiltersFlowPaths_Module);
  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module vtkFiltersFlowPaths");
  }

  const char *depends[5] = {
    "vtkmodules.vtkCommonCore",
    "vtkmodules.vtkCommonComputationalGeometry",
    "vtkmodules.vtkCommonDataModel",
    "vtkmodules.vtkCommonExecutionModel",
    "vtkmodules.vtkCommonMath",
  };

  for (int i = 0; i < 5; i++)
  {
    if (!vtkPythonUtil::ImportModule(depends[i], d))
    {
      Py_DECREF(m);
      return PyErr_Format(PyExc_ImportError,
        "Failed to load vtkFiltersFlowPaths: No module named %s",
        depends[i]);
    }
  }

  if (!vtkPythonUtil::IsInitialized())
  {
    Py_DECREF(m);
    return PyErr_Format(PyExc_ImportError,
      "Initialization failed for vtkFiltersFlowPaths, not compatible with %s",
      depends[0]);
  }

  PyVTKAddFile_vtkAbstractInterpolatedVelocityField(d);
  PyVTKAddFile_vtkAMRInterpolatedVelocityField(d);
  PyVTKAddFile_vtkCachingInterpolatedVelocityField(d);
  PyVTKAddFile_vtkCellLocatorInterpolatedVelocityField(d);
  PyVTKAddFile_vtkCompositeInterpolatedVelocityField(d);
  PyVTKAddFile_vtkEvenlySpacedStreamlines2D(d);
  PyVTKAddFile_vtkInterpolatedVelocityField(d);
  PyVTKAddFile_vtkLagrangianBasicIntegrationModel(d);
  PyVTKAddFile_vtkLagrangianMatidaIntegrationModel(d);
  PyVTKAddFile_vtkLagrangianParticle(d);
  PyVTKAddFile_vtkLagrangianParticleTracker(d);
  PyVTKAddFile_vtkLinearTransformCellLocator(d);
  PyVTKAddFile_vtkModifiedBSPTree(d);
  PyVTKAddFile_vtkParallelVectors(d);
  PyVTKAddFile_vtkParticlePathFilter(d);
  PyVTKAddFile_vtkParticleTracer(d);
  PyVTKAddFile_vtkParticleTracerBase(d);
  PyVTKAddFile_vtkStreaklineFilter(d);
  PyVTKAddFile_vtkStreamSurface(d);
  PyVTKAddFile_vtkStreamTracer(d);
  PyVTKAddFile_vtkTemporalInterpolatedVelocityField(d);
  PyVTKAddFile_vtkVectorFieldTopology(d);
  PyVTKAddFile_vtkVortexCore(d);
  PyVTKAddFile_vtkFiltersFlowPathsModule(d);

  vtkPythonUtil::AddModule("vtkFiltersFlowPaths");

  return m;
}

